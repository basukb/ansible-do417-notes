Ansible
=======

Command Line Syntax
===================
  Documentation
  -------------
    ansible-doc [-t PLUGIN] -l|MODULE_NAME
      # ansible-doc -t connection -l
      # ansible-doc -t connection local
      # ansible-doc -t callback -l
      # ansible-doc -t become -l        # become_method settings
      # ansible-doc -l
      # ansible-doc command

  Config
  ------
    ansible-config list

  Ad-Hoc
  ------
    ansible --version|--help
    ansible [-i INVENTORY] [--list-hosts] HOST-PATTERN
    ansible HOST-PATTERN [-m MODULE] {-a 'ARGS...'} \
      [-i INVENTORY] [-u REMOTE-USER] [-k] [-f FORKS] [-v[v[v[v]]]] \
      [-b] [--become-method su|sudo|enable|runas] [--become-user USER] [-K]

      # ansible -i myinventory -m ios_command -a "commands='show version'" cs01
      # ansible webservers -a 'hostname'

  Playbook
  --------
    ansible-playbook PLAYBOOK [-e VAR=VALUE]... \
      [-i INVENTORY] [-u REMOTE-USER] [-k] \
      [-b] [--become-method su|sudo|enable|runas] [--become-user USER] [-K] \
      [-f FORKS] [--syntax-check] [-C] [--diff] [-v[v[v[v]]]] \
      [--list-tasks] [--[skip-]tags TAGS,..] \
      [--ask-vault-pass|{--vault-password-file PASSWORD_FILE}]

  Common options for ansible and ansible-playbook commands
  --------------------------------------------------------
    CMD Line options        ansible.cfg
    ----------------        -----------
                            # [defaults] section
    -i INVENTORY            inventory_path = PATH
    -u REMOTE_USER          remote_user = REMOTE_USER
    -k                      ask_pass = True/False
    -f FORKS                forks = FORKS
    -c CONNECTION_TYPE      transport = Smart|ssh|paramiko|local|winrm|network_cli

                            # [privilege_escalation] section
    -b                      become = True/False
    --become-user USER      become_user = USER
    --become_method METHOD  become_method = METHOD
    -K                      become_ask_pass = True/False


  Inventory
  ---------
    ansible-inventory [-i INVENTORY] [--graph|--list] [-y]

      # ansible-inventory --graph
      # ansible-inventory --list -y

  Vault
  -----
    ansible-vault create|edit|encrypt|decrypt|view|rekey \
      [--vault-password-file PASSWORD_FILE] FILENAME

  Galaxy
  ------
    ansible-galaxy collection|role init|install ROLE_NAME

      # ansible-galaxy collection init mycollection
      # ansible-galaxy role init myrole

Configuration File
==================
  Location and Precedence
  -----------------------
    0. CMD Line (-i) option         # CMD Line options are always the highest precedence
    1. $ANSIBLE_CONFIG              # Environment Variable
    2. ./ansible.cfg                # current directory
    3. ~/.ansible.cfg               # hidden file name in home directory
    4. /etc/ansible/ansible.cfg     # Default

  Sample ansible.cfg config (INI)
  -------------------------------
  [defaults]
  inventory   = <INVENTORY_DIR/FILE>
  remote_user = <USERNAME>
  transport   = winrm                # or set the ansible_connection variable
  ask_pass    = true/false
  roles_path  = ROLES_DIR
  log_path    = LOG_FILE
  gathering   = smart|Implicit|explicit  # "ansible-config list" for help

  [privilege_escalation]
  become          = true|False
  become_method   = runas/psexec
  become_user     = USERNAME
  become_ask_pass = false/true

Inventory
=========
    Inventory files inside the inventory directory
    ----------------------------------------------
        File Format: INI/YAML

        In INI inventory
        Can use range generator operators:
            server[1:5]   # this will generate server1 server2 server3 server4 server5
            host[c:e]     # this will generate hostc hostd hoste
        Create group of groups by using :children keyword
            [group_a]
            host-1
            host-2

            [group_b]
            host-3

            [big_group:children]
            group_a
            group_b

        Create group vars by using :vars keyword
            host-1    my_value1=100
            host-2    another_data="something long"

            [group_a:vars]
            value_x = 100
            message = "good morning"

    Use a custom name to refer to an existing host in your dc
        mr.troublemaker   ansible_host=server3.example.com

    These internal variables can be set at inventory level for individual host/groups
    Inventory group variables are declared in <INVENTORY_DIR>/group_vars/<INVENTORY_GROUPNAME>
    Inventory host variables are declared in <INVENTORY_DIR>/host_vars/<INVENTORY_HOSTNAME>
        <INVENTORY_DIR>
        - group_vars
            - all
            - webservers
            - dbservers
        - host_vars
            - win1.example.com
            - win2.example.com

    Inventory YAML Syntax
    ---------------------
      all:
        children:
            ungrouped:
            hosts:
                HOST_DICTS
            vars:
                VAR_DICTS
            GROUP_NAME:
            hosts:
                HOST_DICTS
            vars:
                VAR_DICTS
            GROUP_NAME: {}

YAML
====

  ---   # start of file - optional
  ...   # end of file - optional

  LIST always starts with a dash (followed by space!!!)
    - hosta
    - hostb
    - groupa

  DICTIONARY is a key-value pair separated by colon (followed by space!!!)
    item: abc
    msg: Hello World
    value1: 12345

  multi line can be written as
    address: |
      1, Block A,
      ABC Avenue,
      1234 FairyLand.

  single line can be written as
    long_line: >
      This is a very very very long single
      line message that is written with
      multiple repeats, repeating over
      and over and over and over and over.

  Abbrevation of dictionary and list
  LONG                    SHORT
  ----                    -----
  user:                   user: {name: John, age: 12}
    name: John
    age: 12

  store_item:             store_item: ['banana', 'apple', 'cherry']
    - banana
    - apple
    - cherry

  user_list:              user_list:
    - name: one             - {name: one, age: 1}
      age: 1                - {name: two, age: 2}
    - name: two
      age: 2


  instead of single very long line
    when: ansible_facts['distribution'] == "Microsoft Windows Server 2016 Datacenter" or ansible_facts['distribution'] == "Microsoft Windows Server 2012 Datacenter"

  you can make use of > and write it this way
    when: >
      ansible_facts['distribution'] == "Microsoft Windows Server 2016 Datacenter" or 
      ansible_facts['distribution'] == "Microsoft Windows Server 2012 Datacenter"

  Ref: https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html

Playbook Syntax
===============
  ---                                     # start of YAML (optional)
  - name: PLAY_NAME
    host: HOST_LIST
    vars: VAR_DICTS
    vars_files: FILES_LIST                # higher priority over the vars
    become: true|false
    gather_facts: True|false              # when dealing with network devices set to False    become: true|False
    ignore_errors: true|False             # dangerous. Try not to use this if possible.
    force_handlers: False|true
    pre_tasks: TASK_LIST
    roles:                                # can be written as - {role: ROLE, var: VALUE, ...}
      - role: ROLE_NAME                  ╶┬╴ ROLE
        VAR_DICTS                         │
        tags: TAG_LIST                    │
        become: true|false               ╶╯
    tasks:
      - name: TASK_NAME                  ╶┬╴ TASK
        vars: VAR_DICTS                   │
        MODULE_NAME: MOD_OPT_DICTS        │
        become: true|false                │
        register: VAR_NAME                │
        ignore_errors: true|False         │
        loop: CONDITION_LIST              │
        when: CONDITION_LIST              │   # before task execution
        changed_when: CONDITION_LIST      │   # after task execution
        failed_when: CONDITION_LIST       │   # after task execution
        delegate_to: INVENTORY_HOSTNAME   │
        delegate_facts: true|False        │
        notify: HANDLER_LIST             ╶╯
        listen: HANDLER_NAME              # ONLY used under handlers section

      - block: TASK_LIST                 ╶┬╴ BLOCK
        rescue: TASK_LIST                 │
        always: TASK_LIST                 │
        become: true|false                │
        when: CONDITION_LIST             ╶╯

    post_tasks: TASK_LIST
    handlers: TASK_LIST

  - name: Import Playbook
    import_playbook: PLAYBOOK
  ...

Variables
=========
  SCOPE
  -----
    3 Types:
      1. Global - Variables can be used anywhere in Playbook
      2. Play   - Variables can only be used in Play/Task where they were declared
      3. Host   - Variables can be used in ANY Playbook
                  Also known as inventory variables
                  Only available in hosts where they were declared

              Precedence                          Validity
              ----------                          --------
    1. Global 1. -e CMD LINE OPTION               PLAYBOOK # cmd line or ansible.cfg config
    2. Play                                       PLAYBOOK # play level
              2. INCLUDE_VARS MODULE              PLAY - FROM INCLUDE TASK ONWARDS
              3. TASK VARS                        Task ONLY
              4. PLAY VARS_FILES                  PLAY
              5. PLAY VARS                        PLAY
    3. Host                                       # inventory variables
              6. PLAYBOOK HOST_VARS               ╶┬╴Playbook
              7. INVENTORY HOST_VARS               │
              8. INVENTORY FILE HOST variables     │
              9. PLAYBOOK GROUP_VARS               │
              10. INVENTORY GROUP_VARS             │
              11. PLAYBOOK GROUP_VARS/all          │
              12. INVENTORY GROUP_VARS/all         │
              13. INVENTORY FILE GROUP VARIABLES  ╶╯

  Variables Precedence
  --------------------
    PROJECT/
      ├╴ansible.cfg                           # INI Syntax
      ├╴group_vars/
      │ ├╴all                   6
      │ └╴GROUP_NAME            4
      ├╴host_vars/
      │ └╴INVENTORY_HOSTNAME    1
      ├╴inventory/
      │ ├╴group_vars/
      │ │ ├╴all                 7
      │ │ └╴GROUP_NAME          5
      │ ├╴host_vars/
      │ │ └╴INVENTORY_HOSTNAME  2
      │ └╴INVENTORY_FILE        3h 8g         # INI Syntax
      └╴playbook.yaml

  Internal Variables
  ------------------
    # connection type
      ansible_connection: local|Smart|ssh|paramiko|winrm|network_cli|netconf    # "ansible-doc -t connection -l"
    # windows
      ansible_winrm_transport: basic|credssp|kerberos
      ansible_winrm_server_cert_validation: ignore 
      ansible_port: 5986
    # common
      ansible_user: USERNAME
      ansible_password: PASSWORD
    # others
      ansible_host: <IPADDR|FQDN>
      ansible_become: true|false
      ansible_become_user: <USER>
      ansible_become_method: su|Sudo|psexec|runas|enable
      ansible_python_interpreter: auto|<LOCATION>

    When identifying current managed hosts:
      inventory_hostname
      ansible_host
      ansible_facts['hostname']   # short hostname
      ansible_facts['fqdn']       # fully qualified domain name

    Extras:
      become     - https://docs.ansible.com/ansible/latest/user_guide/become.html
      network_os - https://docs.ansible.com/ansible/latest/network/user_guide/platform_index.html

  Magic Variables
  ---------------
    inventory_hostname      # inventory host name
    groups                  # List of all inventory groups and their members
    group_names             # List of all groups that the current inventory host belongs
    hostvars                # ALL inventory variables

    Eg.
      Assuming you're inside servera now, to refer to it's own groups magic var:
        hostvars.servera.groups OR
        hostvars['servera']['groups'] OR
        groups
      Structure of hostvars is as below:

      hostvars:
        servera:
          inventory_hostname: servera # each host has it's magic var
          
          group_names:
            - webservers
            - nodes
          groups:
            all:
              - monkey
              - servera
              - serverb
            nodes:
              - servera
              - serverb
            webservers:
              - servera
            dbservers:
              - serverb
            ungrouped:
              - monkey
          ansible_facts: {}
        serverb:
          inventory_hostname: serverb
          ...
          
Conditional Symbols
===================
   ==           equal to
   !=           not equal to
   >            greater than
   <            less than
   >=           greater than or equal to 
   <=           less than or equal to
   is defined   variable is defined
   is not defined   variable is not defined
   in LIST          variable/value is in a LIST

HANDLERS
========
  RULES
  -----
    Handlers will only execute:
      1. The task that notified the handler has a status of "changed"
      2. In the order defined, and not the notified order.
      3. Once regardless of how many times it was notified.
      4. After ALL TASKS have completed for the PLAY.
            EXCEPTION - force_handlers: true
            EXCEPTION - calling to meta module with flush_handlers argument as one of the tasks.
              - name: running notified handlers
                meta: flush_handlers
      5. In their own namespace. (You can't notify a playbooks handler from inside a role and vice versa)

  Execution Order
  ---------------
    Handlers will execute based on the above rules each time for pre_tasks, tasks and post_tasks.
      1. pre_tasks
      2.   handlers
      3. roles
      4. tasks
      5.   handlers
      6. post_tasks
      7.   handlers

Jinja2
======
  Delimeters:
    {% ... %} - statements
    {{ ... }} - expressions to generate as output
    {# ... #} - comments not included in output

  Conditional Statements:
    {% if CONDITION %}
    ...
    {% else %}
    ...
    {% endif %}

  Loops:
    {% for VAR in LIST %}
    {% if CONDITION %}
    ...
    {% endif %}
    {% endfor %}

    {% for VAR in LIST [if CONDITION] %}
    ...
    {% endfor %}

TIPS
====
  Variables
  ---------
    boolean & floating point numbers doesn't need to be quoted.

  Docs
  ----
    Config Settings   - https://docs.ansible.com/ansible/latest/reference_appendices/config.html
    Playbook Keywords - https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html
    Playbook Filters  - https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html
    Jinja2            - https://jinja.palletsprojects.com/en/3.1.x/templates

Windows Modules
===============
  - win_ping:
  - win_reboot:
  - setup:
  - win_product_facts:
  - win_disk_facts:
  - win_partition:
  - win_format:
  - win_defrag:
  - win_hostname:
  - win_command:
  - win_shell:
  - win_psexec:
  - script:
  - win_schedule_task:
  - win_schedule_task_stat:
  - include_vars:
      file:
  - debug:
      var: <VARIABLE>           # OR msg: "<MESSAGE>"
  - win_file:
  - win_acl:
  - win_stat:
  - win_owner:
  - win_copy:
      content|src:
      dest:
  - win_robocopy:
  - win_template:
      src:
      dest:
  - win_find:
  - win_lineinfile:
  - win_shortcut:
  - win_file_version:
  - win_tempfile:
  - win_unzip:
  - win_package:                # install/remove MSI/EXE Packages
      path: <MSI/EXE_FILE>
      state: Present|absent
      creates_{path|service|version}: <PATH|SERVICE|VERSION>    # used to validate if successful
  - win_updates:                # search, download and install using Windows Update Client
      category_names: <LIST_OF_CATEGORIES>    # refer to ansible-doc
      blacklist: <LIST_OF_KB>
      whitelist: <LIST_OF_KB>                 # updates based of the list
      use_scheduled_tasks: False|true         # elevate privilege
      reboot: False|true                      # if true, async does not work
      reboot_timeout: <SECONDS>               # default 1200
      state: Installed|searched               # search returns a list
  - win_hotfix:
      hotfix_kb:
      source:
      state:
  - win_chocolatey:             # manage package with Chocolatey(will install if not already installed)
      name: <PACKAGE_LIST>
      state: Present|absent|downgrade|latest|reinstall
      proxy_url:
      timeout: <SECONDS>          # default 2700
      version: <SPECIFIC_VERSION> # refer to ansible-doc
  - win_feature:                # install/remove Windows Roles and Features
      name:                     # use Get-WindowsFeature PowerShell command to list
      include_sub_features:
      include_management_tools: False|true
      state: Present|absent
  - win_psmodule:
  - win_iis_website:
  - win_iis_webbinding:
  - win_dsc:
      resource_name:
      name:
  - win_service:                # manage/query Windows Services
      name:
      state: started|stopped|restarted|paused|absent
  - win_regedit:
      path: {HKCC|HKLM|HKCU|HKCR|HKU}:<PATH>
      name:
      data:
      type: String|binary|dword|expandstring|multistring|qword
      state: Present|absent
  - win_reg_stat:               # query registry key
      path: {HKCC|HKLM|HKCU|HKCR|HKU}:<PATH>
      name:
  - win_regmerge:               # merge registry with missing keys.
      path: <REGISTRY_FILE>       # you might want to delete key first before merge.
      compare_to: {HKCC|HKLM|HKCU|HKCR|HKU}:<PATH>
  - win_user:                   # manage local Windows users accounts
      name:
      password: <PLAIN_TEXT>
      state: Present|absent|query
      groups: <GROUP_LIST>
      groups_action: Replace|add|remove
      account_disable: yes|no
      account_locked: no
      description:
      fullname:
      password_expired: yes|no
      password_never_expires: yes|no
      update_password: Always|on_create
      user_cannot_change_password: yes|no
  - win_user_profile:
      username:         # use this for valid user account (SID)
      name:             # the base name for the profile path. use this to delete profile of a deleted account.
      state: Present|absent
      remove_multiple: False|true
  - win_group:
      name:
      state:
  - win_group_membership:
      name:
      members: <USER_LIST>
      state:
  - win_domain:         # manages Windows Active Directory
      create_dns_delegation:
      database_path:
      dns_domain_name:
      domain_mode:
      domain_netbios_name:
      forest_mode:
      safe_mode_password:
      sysvol_path:
  - win_domain_user:
      name:
      firstname:
      surname:
      company:
      password: <PLAIN_TEXT>
      state:
      groups:
      street:
      city:
      state_province:
      postal_code:
      country:
      attributes: 
      account_locked: no        # ONLY use to unlock a user account
  - win_domain_group:
      name:
      description:
      state: Present|absent
  - win_domain_group_membership:
      name:
      members:
      state:
  - win_domain_controller:
      dns_domain_name:
      domain_admin_user:
      domain_admin_password:
      safe_mode_password:
      state:
  - win_domain_membership:
      dns_domain_name:
      domain_admin_user:
      domain_admin_password: <PLAIN_TEXT>
      state: domain|workgroup|
  - win_domain_computer:
      name:
      sam_account_name:
      dns_hostname:
      ou:
      state:
  - import_tasks:
  - include_tasks:
  - include_role:


GARBAGE
=======
  - name: get file stat
    win_stat:
      path: C:\My Application\My Dir\fileX.abcd
    register: stat_result

  - name: do something
    debug:
      msg: the path variable exists and it is a directory
    when:
      - stat_result.stat.exists
      - stat_result.stat.isdir

  - name: another playbook
    var:
      abc:
        - def: abc
          one: two
        - second: item
          one: three
      my_data: "{{ my_variable | default('123') }}"
    tasks:
      - name: anything
        vars: 
          my_item: |
            {% if inventory_hostname == 'abc' %}
            this is the first item
            {% else %}
            this is not the first item
            {% endif %}
        win_copy:
          content: "{{ abc|to_yaml }}"
          dest: C:\somewhere\myfile.dat

      roles:
        - role: role1
          key1: value1
          key2: value2 hellow
        - role: role1
          vars:
            key1: abc
            key2: def
        - { role: role1, vars: { key1: no3, key2: three }}
        - { role: role1, key1: no4, key2: four }
        - { role: role1, key1: no5, key2: five }
